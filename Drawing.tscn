[gd_scene load_steps=2 format=3 uid="uid://r5o6c5lg4s1i"]

[sub_resource type="GDScript" id="GDScript_kr0f6"]
script/source = "extends CanvasLayer

var drawing = false
var path = PackedVector2Array()
var zoom_speed = 0.1
var max_zoom_out = 0.5  # Set your desired maximum zoom-out value

func _ready():
	set_process_input(true)

func _input(event):
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_LEFT:
			drawing = event.pressed
			if drawing:
				path.clear()
				path.append(_get_scaled_mouse_position(event.position))
			else:
				# Finish drawing
				path.append(_get_scaled_mouse_position(event.position))
				draw_path()

	elif event is InputEventMouseMotion and drawing:
		path.append(_get_scaled_mouse_position(event.position))
		draw_path()

	elif event is InputEventKey:
		if event.keycode == KEY_I:
			print(\"Zoom in\")
			# Zoom in
			scale *= 1.0 - zoom_speed

		elif event.keycode == KEY_O:
			print(\"Zoom out\")
			# Calculate the new scale without applying it
			var new_scale = scale / (1.0 - zoom_speed)

			# Check if the new scale exceeds the maximum zoom-out limit
			if new_scale.x > max_zoom_out and new_scale.y > max_zoom_out:
				# Apply the new scale only if it doesn't exceed the limit
				scale = new_scale

			# Ensure a minimum scale
			scale.x = max(scale.x, max_zoom_out)
			scale.y = max(scale.y, max_zoom_out)

func draw_path():
	var line = Line2D.new()
	line.width = 5  # Set your desired line width
	line.points = path
	add_child(line)

func _get_scaled_mouse_position(original_position):
	# Adjust the mouse position based on the scale of the CanvasLayer
	return original_position / scale
"

[node name="Node2D" type="CanvasLayer"]
script = SubResource("GDScript_kr0f6")
